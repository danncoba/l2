services:
  pgdb:
    image: pgvector/pgvector:pg17 # PostgreSQL with pgvector support
    container_name: pg-vector
    environment:
      POSTGRES_USER: danijel
      POSTGRES_PASSWORD: slobomirp7008
      POSTGRES_DB: l2main
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # Cassandra for Jaeger storage
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=jaeger-cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
    volumes:
      - cassandra-data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

#  # Jaeger initialization script
#  jaeger-init:
#    image: cassandra:4.1
#    container_name: jaeger-init
#    depends_on:
#      cassandra:
#        condition: service_healthy
#    command: >
#      sh -c "
#        echo 'Waiting for Cassandra to be ready...'
#        until cqlsh cassandra 9042 -u cassandra -p cassandra -e 'describe keyspaces'; do
#          echo 'Cassandra not ready yet, waiting...'
#          sleep 5
#        done
#        echo 'Creating Jaeger keyspace...'
#        cqlsh cassandra 9042 -u cassandra -p cassandra -e \"
#          CREATE KEYSPACE IF NOT EXISTS jaeger_v1_dc1
#          WITH replication = {
#            'class': 'SimpleStrategy',
#            'replication_factor': 1
#          };
#        \"
#        echo 'Jaeger keyspace created successfully'
#      "
#    restart: "no"
#
#  # Jaeger schema initialization
#  jaeger-schema-init:
#    image: jaegertracing/jaeger-cassandra-schema:1.54
#    container_name: jaeger-schema-init
#    depends_on:
#      jaeger-init:
#        condition: service_completed_successfully
#    environment:
#      - CASSANDRA_SERVERS=cassandra:9042
#      - CASSANDRA_KEYSPACE=jaeger_v1_dc1
#      - CASSANDRA_USERNAME=cassandra
#      - CASSANDRA_PASSWORD=cassandra
#      - CASSANDRA_DATACENTER=datacenter1
#      - CASSANDRA_RACK=rack1
#    restart: "no"
#
#  # Jaeger with Cassandra storage
#  jaeger:
#    image: jaegertracing/all-in-one:1.54
#    container_name: jaeger
#    ports:
#      - "16686:16686"  # Jaeger UI
#      - "14268:14268"  # HTTP collector
#      - "14250:14250"  # gRPC collector
#      - "6831:6831/udp"  # UDP collector
#      - "6832:6832/udp"  # UDP collector
#    environment:
#      - SPAN_STORAGE_TYPE=cassandra
#      - CASSANDRA_SERVERS=cassandra:9042
#      - CASSANDRA_KEYSPACE=jaeger_v1_dc1
#      - CASSANDRA_USERNAME=cassandra
#      - CASSANDRA_PASSWORD=cassandra
#      - CASSANDRA_DATACENTER=datacenter1
#      - CASSANDRA_RACK=rack1
#      - CASSANDRA_USE_EXTERNAL_REMOTE_WRITE=false
#      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
#      - COLLECTOR_OTLP_ENABLED=true
#    depends_on:
#      jaeger-schema-init:
#        condition: service_completed_successfully
#    restart: unless-stopped
#
#    # OpenTelemetry Collector
#  otel-collector:
#    image: otel/opentelemetry-collector-contrib:0.88.0
#    container_name: otel-collector
#    command: [ "--config=/etc/otel-collector-config.yaml" ]
#    volumes:
#      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
#    ports:
#      - "4317:4317"   # OTLP gRPC receiver
#      - "4318:4318"   # OTLP HTTP receiver
#      - "8888:8888"   # Collector metrics
#      - "8887:8887"

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # MinIO API port
      - "9001:9001"  # MinIO Console port
    volumes:
      - minio-data:/data  # Persistent storage for MinIO data
    environment:
      MINIO_ROOT_USER: minioadmin  # Root user for MinIO
      MINIO_ROOT_PASSWORD: minioadmin  # Root password for MinIO
    command: server /data --console-address ":9001"

  langtrace-app:
    container_name: langtrace
    image: scale3labs/langtrace-client:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    working_dir: /app
    env_file:
      - langtrace.env
    ports:
      - "3000:3000"
    # Uncomment this for development
    # command: npm run dev
    # volumes:
    #   - .:/app
    restart: on-failure:5
    depends_on:
      pgdb:
        condition: service_started
        required: true
      clickhouse-db:
        condition: service_healthy
        required: true

  clickhouse-db:
    container_name: langtrace-clickhouse
    image: clickhouse/clickhouse-server:24.5.1.1763-alpine
    environment:
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=slobomirp7008
      - CLICKHOUSE_USER=danijel
      - CLICKHOUSE_DB=langtrace
    ports:
      - "8123:8123"
      - "9002:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://langtrace-clickhouse:8123/ping || exit 1
      retries: 3
      start_period: 30s
      start_interval: 5s
      interval: 30s
    volumes:
      - clickhouse-data:/var/lib/clickhouse

  langtrace-app-prod:
    extends:
      service: langtrace-app
    build:
      target: production
    profiles:
      - production


volumes:
  pgdata:
#  grafana-storage:
  minio-data:
  cassandra-data:
  clickhouse-data:
